{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","h","m","s","ms","time","setTime","interv","setInterv","status","setStatus","reset","clearInterval","updatedH","updatedM","updatedS","updatedMS","run","className","onClick","setInterval","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gKAgFeA,MA7Ef,WAAgB,IAAD,EACUC,mBAAS,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,GAAG,IADnC,mBACNC,EADM,KACDC,EADC,OAEcN,qBAFd,mBAENO,EAFM,KAECC,EAFD,OAGcR,mBAAS,GAHvB,mBAGNS,EAHM,KAGCC,EAHD,KAuBPC,EAAQ,WACZC,cAAcL,GACdD,EAAQ,CAACL,EAAE,EAAEC,EAAE,EAAEC,EAAE,IACnBO,EAAU,IAGRG,EAASR,EAAKJ,EAAEa,EAAST,EAAKH,EAAEa,EAASV,EAAKF,EAAEa,EAAUX,EAAKD,GAE7Da,EAAM,WAiBV,OAhBiB,MAAdD,IAEDD,GAAW,EACXC,EAAY,GAEE,KAAbD,IAEDD,GAAW,EACXC,EAAU,GAEI,KAAbD,IAEDD,GAAW,EACXC,EAAU,GAEZE,IACOV,EAAQ,CAACL,EAAEY,EAASX,EAAEY,EAASX,EAAEY,EAASX,GAAGY,KAGtD,OACE,yBAAKE,UAAU,OACV,yBAAKA,UAAU,SACtB,uBAAGA,UAAU,QAAQb,EAAKJ,EAA1B,IAA8BI,EAAKH,EAAnC,IAAuCG,EAAKF,EAAE,8BAAOE,EAAKD,MAEpD,yBAAKc,UAAU,WACA,IAAXT,EACI,4BAAQU,QApDR,WACZF,IACAT,EAAUY,YAAYH,EAAI,KAC1BP,EAAU,IAiD0BQ,UAAU,SAAlC,SAAyD,GAGlD,IAAXT,EACA,6BACC,4BAAQU,QAnDN,WACXP,cAAcL,GACdG,EAAU,IAiDsBQ,UAAU,QAAjC,QACA,4BAAQC,QAASR,EAAMO,UAAU,SAAjC,UAA8D,GAGpD,IAAXT,EACA,6BACE,4BAAQU,QApDL,WACbF,IACAT,EAAUY,YAAYH,EAAI,KAC1BP,EAAU,IAiDyBQ,UAAU,UAAnC,UACD,4BAAQC,QAASR,EAAMO,UAAU,SAAjC,UAA8D,MC7DvDG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.da63d276.chunk.js","sourcesContent":["import React,{useState} from 'react';\n\n\nfunction App() {\n  const [time,setTime] = useState({h:0,m:0,s:0,ms:0});\n  const [interv,setInterv] = useState();\n  const [status,setStatus] = useState(0);\n  \n  \n  const start = () =>{\n    run();\n    setInterv(setInterval(run,10));\n    setStatus(1);\n  }\n\n  const stop = () =>{\n    clearInterval(interv);\n    setStatus(2);\n  }\n\n  const resume = () =>{\n    run();\n    setInterv(setInterval(run,10));\n    setStatus(1);\n  }\n\n  const reset = () => {\n    clearInterval(interv);\n    setTime({h:0,m:0,s:0});\n    setStatus(0);\n  }\n\n  var updatedH=time.h,updatedM=time.m,updatedS=time.s,updatedMS=time.ms;\n\n  const run = () =>{\n    if(updatedMS === 100)\n    {\n      updatedS +=1;\n      updatedMS = 0\n    }\n    if(updatedS === 60)\n    {\n      updatedM +=1;\n      updatedS =0;\n    }\n    if(updatedM === 60)\n    {\n      updatedH +=1;\n      updatedM =0;\n    }\n    updatedMS++\n    return setTime({h:updatedH,m:updatedM,s:updatedS,ms:updatedMS});\n  }\n\n  return (\n    <div className=\"App\">\n         <div className=\"timer\">\n  <p className=\"time\">{time.h}:{time.m}:{time.s}<span>{time.ms}</span></p>\n        </div>\n        <div className=\"buttons\">\n          {(status === 0)?\n                <button onClick={start} className=\"start\">start</button>:\"\"\n          }\n\n          {(status === 1)?\n            <div>\n             <button onClick={stop} className=\"stop\">stop</button>\n             <button onClick={reset}className=\"reset\">reset</button></div>:\"\"\n          }\n\n          {(status === 2)?\n            <div>\n              <button onClick={resume} className=\"resume\">resume</button>\n             <button onClick={reset}className=\"reset\">reset</button></div>:\"\"\n          }\n        </div> \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}